#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("nails:server");
var http = require("http");

const mongoose = require("mongoose");
require("dotenv").config();
const logger = require("../config/winston");

/**
 * Get port from environment and store in Express.
 */

// var port = normalizePort(process.env.PORT || '8000');
// app.set('port', port);

/**
 * Create HTTP server.
 */

var server;

/**
 * Listen on provided port, on all network interfaces.
 */

// mongo Server

// mongo Server

mongoose.connect(
  process.env.database,
  { useNewUrlParser: true, useUnifiedTopology: true },
  (err) => {
    if (err) {
      console.log("error connecting to mongodb", err);
    } else {
      console.log("connected to mongodb");
    }
  }
);

// mongoose
//   .connect(process.env.database)
//   .then(() => {
//     logger.info("connected to mongo");
//     server = http.createServer(app);
//     // server.listen(port);
//     server.on("error", onError);
//     server.on("listening", onListening);
//   })
//   .catch((err) => {
//     logger.fatal(`could not connect to mongoDB: ${err}`);
//     process.exit(1);
//   });

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      logger.fatal(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      logger.fatal(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
  logger.info("Listening on " + bind);
}
